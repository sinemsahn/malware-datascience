#exe olani ifle
#!/usr/bin/python

import os
import sys
import pickle
import argparse
import re
import numpy
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_extraction import FeatureHasher

import pefile

def get_string_features(path,hasher):
    # regular expressions(normal ifadeler) kullanarak  ikili dosyadan string ayıklayın
    chars = r" -~"
    min_length = 5
    string_regexp = '[%s]{%d,}' % (chars, min_length)
    file_object = open(path)
    data = file_object.read()
    pattern = re.compile(string_regexp)
    strings = pattern.findall(data)

    # dize string  özelliklerini sözlük (dictionary) biçiminde saklayın
    string_features = {}
    for string in strings:
        string_features[string] = 1
    pe = pefile.PE(path)
	
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        for function in entry.imports:
            string_features[function.name]=1

	

    # hashing hilesini kullanarak özellikleri karma hale getirin
    hashed_features = hasher.transform([string_features])

    #özellik dizisini elde etmek için biraz veri işleme yapın 
    hashed_features = hashed_features.todense()
    hashed_features = numpy.asarray(hashed_features)
    hashed_features = hashed_features[0]

    # hashing uygulanmış dize özelliğini döndür
    print "Çıkartılıyor  {0} strings dosyamız: {1}".format(len(string_features),path)
    return hashed_features

def get_iat_features(path, hasher):
    try:
        #pefile kullanarak ikili dosyadan iat ayıklayın
        pe = pefile.PE(path)
        #iat dizesi özelliklerini sözlük biçiminde saklayın
        iat_features ={}
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
            for function in entry.imports:
            	iat_features[function.name]=1

            # hashing hilesini kullanarak özellikleri karma hale getirin
        hashed_features = hasher.transform([iat_features])

            # özellik dizisini elde etmek için biraz veri işleme yapın
        hashed_features = hashed_features.todense()
        hashed_features = numpy.asarray(hashed_features)
        hashed_features = hashed_features[0]

            # return hashed string feature
        print "Çıkartılıyor {0} iat  dosyamız: {1}".format(len(iat_features),path)
        return hashed_features
	
    except:
        iat_features ={}
            
        hashed_features = hasher.transform([iat_features])

         
        hashed_features = hashed_features.todense()
        hashed_features = numpy.asarray(hashed_features)
        hashed_features = hashed_features[0]

            # return hashed string feature
        print "Çıkartılamadı  {0}  iat  dosydan  {1}".format(len(iat_features),path)
        return hashed_features

	
		
		


def scan_file(path):
    # zararlı mı yoksa zararsız mı olduğunu belirlemek için bir dosyayı tarayın
    if not os.path.exists("saved_detector.pkl"):
        print "Görünüşe göre henüz bir dedektör eğitmemişsiniz! Dosyaları taramadan önce bunu yapın."
        sys.exit(1)
    with open("saved_detector.pkl") as saved_detector:
        classifier, hasher = pickle.load(saved_detector)
    features = get_string_features(path,hasher)
    result_proba = classifier.predict_proba([features])[:,1]

    featuress = get_iat_features(path,hasher)
    result_probaa = classifier.predict_proba([featuress])[:,1]

    result_proba = result_proba + result_probaa
    #kullanıcı malware_paths ve benignware_paths belirtirse, bir algılayıcı eğitin 
    if result_proba > 1.0:
        print "Görünüşe göre bu dosya kötü amaçlı! malicious",`result_proba`
    else:
        print "Görünüşe göre bu dosya zararsız benign.",`result_proba`

def train_detector(benign_path,malicious_path,hasher):
    # Detektörü belirtilen eğitim verisine göre eğitin
    def get_training_paths(directory):
        targets = []
        for path in os.listdir(directory):
            targets.append(os.path.join(directory,path))
        return targets
    malicious_paths = get_training_paths(malicious_path)
    benign_paths = get_training_paths(benign_path)
    X = [get_string_features(path,hasher) for path in malicious_paths + benign_paths]
    y = [1 for i in range(len(malicious_paths))] + [0 for i in range(len(benign_paths))]
    X += [get_iat_features(path,hasher) for path in malicious_paths + benign_paths]
    y += [1 for i in range(len(malicious_paths))] + [0 for i in range(len(benign_paths))]
    classifier = RandomForestClassifier(n_estimators=64)
    classifier.fit(X,y)
    pickle.dump((classifier,hasher),open("saved_detector.pkl","w+"))



def get_training_data(benign_path,malicious_path,hasher):
    def get_training_paths(directory):
        targets = []
        for path in os.listdir(directory):
            targets.append(os.path.join(directory,path))
        return targets
    malicious_paths = get_training_paths(malicious_path)
    benign_paths = get_training_paths(benign_path)
    X = [get_string_features(path,hasher) for path in malicious_paths + benign_paths]
    y = [1 for i in range(len(malicious_paths))] + [0 for i in range(len(benign_paths))]
    X += [get_iat_features(path,hasher) for path in malicious_paths + benign_paths]
    y += [1 for i in range(len(malicious_paths))] + [0 for i in range(len(benign_paths))]
    return X, y

parser = argparse.ArgumentParser("dosyalar için Windows nesne vektörlerini alın")
parser.add_argument("--malware_paths",default=None,help="Kötü amaçlı yazılım eğitim dosyalarına giden yol")
parser.add_argument("--benignware_paths",default=None,help="İyi huylu yazılım eğitim dosyalarına giden yol")
parser.add_argument("--scan_file_path",default=None,help="Taranacak dosya")


args = parser.parse_args()

hasher = FeatureHasher(20000)
if args.malware_paths and args.benignware_paths :
    train_detector(args.benignware_paths,args.malware_paths,hasher)
elif args.scan_file_path:
    scan_file(args.scan_file_path)

else:
    print "[*] Taranacak bir yol belirtmediniz," \
        "kötü niyetli ve zararlı eğitim dosyalarına giden yolları da belirtmediniz " \
        " dedektörü kullanmak için lütfen bunlardan birini belirtin.\n"
    parser.print_help()